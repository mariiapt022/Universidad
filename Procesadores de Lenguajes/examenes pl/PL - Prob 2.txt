-----------
PROBLEMA 2 | (Análisis léxico)
-----------
programa : instrucciones EOF ;
instrucciones : instruccion instrucciones
 | instruccion
 ;
instruccion : asignacion
 | iteracion
 | seleccion
 | ruptura
 ;

asignacion : IDENT ASIG expr PyC ;

iteracion : WHILE PA expr PC bloque ;

seleccion : IF PA expr PC bloque ;

ruptura : BREAK PyC ;

bloque : instruccion
 | LLA instrucciones LLC
 ;

expr : expr_suma
 ((MENOR|MAYOR|MENORIGUAL|MAYORIGUAL|IGUAL|DISTINTO) expr_suma)?
 ;

expr_suma : expr_mult ((MAS|MENOS) expr_mult)*
 ;

expr_mult : expr_base ((POR|DIV) expr_base)*
 ;

expr_base : NUMERO
 | IDENT
 | PA expr PC
 ; 







[Análisis Semántico]

Objetivo: construir analizador
	  semántico para el lenguaje
	  INTEXP para detectar rupturas
	  inalcanzables (ver enunciado)


Gramática atribuida
-------------------


Global: almacén de rupturas inalcanzables
	para cada ruptura dada


DECISIONES:													// Un nivel puede tener varios bloques.         //
														// Está marcado por la profundidad del código.  //


	DECISION-1: almacén para saber si las rupturas
			son inalcanzables o no. 

		    almacén global = {Nivel,contador_nivel} 
		    programa: {Inicializamos almacén con [N0,0]}  instrucciones EOF ; 

	DECISION-2: la inalcanzabilidad de las rupturas
			se actualiza en el almacén al 
			procesar las asignaciones.


		    iteracion : { Creamos un nuevo nivel con su correspondiente contador a 0, y en caso de que el nivel anterior tenga como resultado '1', arrastramos el valor } 
					WHILE PA expr PC bloque { Para cada fin de bloque, actualizamos el contador a 0 };

		    seleccion : { Creamos un nuevo nivel con su correspondiente contador a 0, y en caso de que el nivel anterior tenga como resultado '1', arrastramos el valor } 
					IF PA expr PC bloque { Para cada fin de bloque, actualizamos el contador a 0 };

		    ruptura : BREAK { Si el contador se encuentra a 0, actualizamos el valor a 1 } PyC 
			
	
	DECISION-3: emitir mensaje en caso de detección 
			de asignación inalcanzable {A/I}

		    ruptura : {En caso de tener en el mismo nivel el contador a 1, devolvemos "Inalcanzable"} BREAK PyC 


Ejemplo:

//N0,0
if() { //N1,0
	break; //N1,0 -> 1
	break; //N1,1 -> D4
	if() { //N2,1
		break;	//N2,1 -> D3
		if() //N3,1	
		break;	//N3,1 -> D3

		Terminamos bloque -> N3,0
		if() //N3,1
			break;
	} Terminamos bloque -> N2,0
	if() //N2,1 (arrastro de N1)
		break;	//N2,1 -> D3

}



-----------
Laboratorio |
-----------

DECISIÓN DISEÑO 2: 

	lista entera implica lista
	lista booleana implica lista
	


DECISIÓN DISEÑO 3: El cálculo del tipo de una expresión se basa en las siguientes funciones:

(función tipo_append(tipo1,tipo2)
	si tipo1 o tipo2 es igual a no tipo entonces
		tipo = no tipo
	sino 
		si tipo1 y tipo2 son iguales a lista entonces
			si tipo1 y tipo2 coinciden entonces
				tipo = tipo1
			sino
				tipo = lista_hibrida
		sino 
			tipo = no tipo )

----------------------------------

				Gramática atribuida

					|
					|
      Listener (no devuelve nada)	|  Visitor (func que recorre árbol) (devuelve algo)
					|
					|



Ejemplo1 de implementación en ANTLR4

/*
asignacion: IDENT ASIG t=expr PyC  
                                     ^
				     |	{comprobar_tipos_asignacion(tipo de IDENT almacenado en almacén variables, t));     
			     
//Como necesitamos el valor de t, y el de IDENT, colocamos la acción al final.
//A la hora de implementarlo, como está al final,lo hacemos mediante Exit.
//En caso contrario sería Entry.

*/


public void exitAsignacion(Anasint.AsignacionContext ctx) {
	//(opcional)Mensaje para indicar qué asignaciones se está procesando.
	System.out.println("Analisis de asignacion: " + ctx.IDENT().getText() + " = " + ctx.expr().getText());
//		conversor.visit(ctx.expr());
	Integer t = (Integer) calcular_tipo_expresion.visit(ctx.expr());
	comprobar_tipos_asignacion(variables.get(ctx.IDENT().getText(), t);
	
}


Ejemplo2 de implementación en ANTLR4

expr_booleana: FALSE {tipo=booleano} 				#Falso
	| TRUE {tipo = booleano}				#Cierto
	| funcion_booleana_binaria(1) 
	   PA(2) 
	      tipo1=expr_booleana(3) COMA(4) tipo2=expr_booleana(5) 
	   PC(6) {tipo=tipo_op_booleana(tipo1, tipo2)} 		#OpBin
	| NOT PA tipo1=expr_booleana PC 			#Neg
		{tipo=tipo_op_booleana(tipo1,booleano)}
	| tipo=variable						#Var

		
Mala Implementación							   |	Buena Implementación
-------------------							   |	-------------------
									   |	
									   |
public Integer visitExpr_booleana(Anasint.Expr_booleanaContext ctx) {      |	public Integer visitOpBin(Anasint.OpBinContext ctx) {
	if(ctx.getChildCount() == 6) {					   |		Integer tipo1 = visit(ctx.expr_booleana(0))
		Integer tipo1 = visit(ctx.expr_booleana(0))		   |		Integer tipo2 = visit(ctx.expr_booleana(1))
		Integer tipo2 = visit(ctx.expr_booleana(1))		   |		return tipo_op_booleana(tipo1, tipo2);
		return tipo_op_booleana(tipo1, tipo2);			   |	}
	} else {							   |
									   |
	}								   |
}									   |


